type BlockInfo = record { height : nat32; hash : text };
type BorrowOffer = record {
  pool_utxo : Utxo;
  nonce : nat64;
  input_runes : CoinBalance;
  output_btc : CoinBalance;
};
type CoinBalance = record { id : text; value : nat };
type DepositOffer = record { pool_utxo : opt Utxo; nonce : nat64 };
type ExchangeError = variant {
  InvalidSignPsbtArgs : text;
  Overflow;
  PoolStateExpired : nat64;
  TooSmallFunds;
  InvalidPool;
  InvalidTxid;
  EmptyPool;
  InvalidState : text;
};
type ExecuteTxArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  psbt_hex : text;
};
type GetMinimalTxValueArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  pool_address : text;
};
type GetPoolInfoArgs = record { pool_address : text };
type InputCoin = record { coin : CoinBalance; from : text };
type Intention = record {
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
  action : text;
  exchange_id : text;
  pool_utxo_spend : vec text;
  action_params : text;
  nonce : nat64;
  pool_utxo_receive : vec text;
  pool_address : text;
};
type IntentionSet = record {
  tx_fee_in_sats : nat64;
  initiator_address : text;
  intentions : vec Intention;
};
type NewBlockInfo = record {
  block_hash : text;
  confirmed_txids : vec text;
  block_timestamp : nat64;
  block_height : nat32;
};
type OutputCoin = record { to : text; coin : CoinBalance };
type PoolBasic = record { name : text; address : text };
type PoolInfo = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  key_derivation_path : vec blob;
  coin_reserved : vec CoinBalance;
  attributes : text;
  address : text;
  nonce : nat64;
  utxos : vec Utxo;
};
type Result = variant { Ok : record { nat64; nat64 }; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : BorrowOffer; Err : ExchangeError };
type Result_4 = variant { Ok : DepositOffer; Err : ExchangeError };
type Result_5 = variant { Ok : vec BlockInfo; Err : text };
type Result_6 = variant { Ok : vec TxRecordInfo; Err : text };
type RollbackTxArgs = record { txid : text };
type TxRecordInfo = record {
  records : vec text;
  txid : text;
  confirmed : bool;
};
type Utxo = record {
  maybe_rune : opt CoinBalance;
  sats : nat64;
  txid : text;
  vout : nat32;
};
service : {
  blocks_tx_records_count : () -> (Result) query;
  execute_tx : (ExecuteTxArgs) -> (Result_1);
  get_minimal_tx_value : (GetMinimalTxValueArgs) -> (nat64) query;
  get_pool_info : (GetPoolInfoArgs) -> (opt PoolInfo) query;
  get_pool_list : () -> (vec PoolBasic) query;
  init_pool : () -> (Result_2);
  new_block : (NewBlockInfo) -> (Result_2);
  pre_borrow : (text, CoinBalance) -> (Result_3) query;
  pre_deposit : (text, CoinBalance) -> (Result_4) query;
  query_blocks : () -> (Result_5) query;
  query_tx_records : () -> (Result_6) query;
  reset_blocks : () -> (Result_2);
  reset_tx_records : () -> (Result_2);
  rollback_tx : (RollbackTxArgs) -> (Result_2);
}
